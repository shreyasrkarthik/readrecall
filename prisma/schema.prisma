generator client {
  provider = "prisma-client-js"
}

generator python {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  books         Book[]
  readingStates ReadingState[]
}

model Book {
  id             String         @id @default(cuid())
  title          String
  author         String
  coverUrl       String?
  epubUrl        String?
  isPublicDomain Boolean        @default(false)
  uploadedById   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  uploadedBy     User?          @relation(fields: [uploadedById], references: [id])
  sections       BookSection[]
  characters     Character[]
  readingStates  ReadingState[]
  summaries      Summary[]
}

model BookSection {
  id            String   @id @default(cuid())
  bookId        String
  title         String?
  content       String
  orderIndex    Int
  startPosition Int
  endPosition   Int
  createdAt     DateTime @default(now())
  book          Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Character {
  id              String   @id @default(cuid())
  bookId          String
  name            String
  description     String?
  firstAppearance Int
  createdAt       DateTime @default(now())
  book            Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model ReadingState {
  id              String   @id @default(cuid())
  userId          String
  bookId          String
  currentPosition Int      @default(0)
  progress        Float    @default(0)
  lastRead        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  book            Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Summary {
  id        String   @id @default(cuid())
  bookId    String
  position  Int
  content   String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, position])
}
